#
# NOTE: this file was automatically generated. Do not edit!
#

require 'spec_helper'
require 'ronin/asm/x86_64/instructions/<%= @instruction.name %>'

require_relative '../helpers/operands'

describe Ronin::ASM::X86_64::Instructions::<%= @instruction.name.upcase %> do
  include Helpers::X86_64::Operands

  <%- unless (operands = @instruction.forms.first.operands).empty? -%>
  let(:operands) { <%= operands_array(operands) %> }
  <%- else -%>
  let(:operands) { [] }
  <%- end -%>

  subject { described_class.new(*operands) }

  describe "#initialize" do
    it "must set #name to <%= @instruction.name.to_sym.inspect %>" do
      expect(subject.name).to be(<%= @instruction.name.to_sym.inspect %>)
    end

    <%- @instruction.forms.each do |instruction_form| -%>
    <%- unless (operands = instruction_form.operands).empty? -%>
    context "when given operands of types <%= operands_type_list(operands) %>" do
      let(:operands) { <%= operands_array(operands) %> }

      it "must set #operands" do
        expect(subject.operands).to eq(operands)
      end

      <%- form_array = instruction_form_array(operands) -%>
      <%- if form_array.include?('"') -%>
      it 'must set #form to <%= form_array %>' do
        expect(subject.form).to eq(<%= instruction_form_array(operands) %>)
      end
      <%- else -%>
      it "must set #form to <%= form_array %>" do
        expect(subject.form).to eq(<%= instruction_form_array(operands) %>)
      end
      <%- end -%>
    end
    <%- else -%>
    context "when given no operands" do
      let(:operands) { [] }

      it "must set #operands to an empty Array" do
        expect(subject.operands).to eq(operands)
      end

      it "must set #form to an empty Array" do
        expect(subject.form).to eq([])
      end
    end
    <%- end -%>

    <%- end -%>
    context "when given operands that do not match any of the instruction's forms" do
      let(:operands) { [reg32, imm8, xmm] }

      it do
        expect {
          described_class.new(*operands)
        }.to raise_error(ArgumentError,"incompatible operands given for instruction: <%= instruction.name %> #{operands.map(&:type).join(', ')}")
      end
    end

    context "when given additional keyword arguments" do
      let(:comment) { 'comment' }

      subject { described_class.new(*operands, comment: comment) }

      it "must pass the keyword arguments to Ronin::ASM::Instruction#initialize" do
        expect(subject.comment).to be(comment)
      end
    end
  end

  describe "#encode"
end
